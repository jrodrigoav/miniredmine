{"version":3,"file":"js/main.js?t=3d7c275f","mappings":"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","sources":["webpack://miniredmine-spa/./src/stores/userstore.ts","webpack://miniredmine-spa/./src/components/Header.svelte","webpack://miniredmine-spa/./src/pages/Index.svelte","webpack://miniredmine-spa/./src/pages/Login.svelte","webpack://miniredmine-spa/./src/pages/Profile.svelte","webpack://miniredmine-spa/./src/stores/issuestore.ts","webpack://miniredmine-spa/./src/pages/Issues.svelte","webpack://miniredmine-spa/./src/stores/templatestore.ts","webpack://miniredmine-spa/./src/stores/activitystore.ts","webpack://miniredmine-spa/./src/pages/Templates.svelte","webpack://miniredmine-spa/./src/stores/teammemberstore.ts","webpack://miniredmine-spa/./src/pages/TeamMembers.svelte","webpack://miniredmine-spa/./src/pages/TimeEntries.svelte","webpack://miniredmine-spa/./src/pages/Report.svelte","webpack://miniredmine-spa/./src/pages/TLEReport.svelte","webpack://miniredmine-spa/./src/App.svelte","webpack://miniredmine-spa/./src/main.ts"],"sourcesContent":["import { writable } from 'svelte/store';\r\nconst _REDMINE_USER = \"REDMINE_USER\";\r\nfunction createUserStore() {\r\n    var _a;\r\n    const user = (_a = localStorage.getItem(_REDMINE_USER)) !== null && _a !== void 0 ? _a : JSON.stringify({ unauthorized: true });\r\n    const jsonUser = JSON.parse(user);\r\n    const { subscribe, set, update } = writable(jsonUser);\r\n    return {\r\n        subscribe,\r\n        register: (currentUser) => update(() => {\r\n            localStorage.setItem(_REDMINE_USER, JSON.stringify(currentUser));\r\n            return currentUser;\r\n        })\r\n    };\r\n}\r\nexport const user = createUserStore();\r\n","<script lang=\"typescript\">\n  import { user } from \"../stores/userstore\";\n  export let handleNavigation: Function; \n  export let isLead:boolean;\n</script>\n\n<nav class=\"navbar navbar-expand-lg navbar-dark bg-primary mb-3\">\n  <a class=\"navbar-brand\" href=\"/\" on:click={(e) => handleNavigation(e, \"/\")}>\n    Mini Redmine 2\n  </a>\n  <button class=\"navbar-toggler\"  type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#mainnavbar\" aria-controls=\"mainnavbar\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span class=\"navbar-toggler-icon\" />\n  </button>\n  <div class=\"collapse navbar-collapse\" id=\"mainnavbar\">\n    <ul class=\"navbar-nav mr-auto\">\n      {#if $user.unauthorized === true}\n        <li class=\"nav-item\">\n          <a\n            class=\"nav-link\"\n            href=\"/login\"\n            on:click={(e) => handleNavigation(e, \"/login\")}\n          >\n            Login\n          </a>\n        </li>\n      {:else}\n        <li class=\"nav-item dropdown\">\n          <a\n            class=\"nav-link dropdown-toggle\"\n            id=\"navbarUser\"\n            role=\"button\"\n            data-bs-toggle=\"dropdown\"\n            aria-expanded=\"false\"\n          >\n            User Menu\n          </a>\n          <ul class=\"dropdown-menu\" aria-labelledby=\"navbarUser\">\n            <li>\n              <a\n                class=\"dropdown-item\"\n                href=\"/user/profile\"\n                on:click={(e) => handleNavigation(e, \"/user/profile\")}\n                >Profile</a\n              >\n            </li>\n            <li>\n              <a\n                class=\"dropdown-item\"\n                href=\"/user/issues\"\n                on:click={(e) => handleNavigation(e, \"/user/issues\")}>Issues</a\n              >\n            </li>\n            <li>\n              <a\n                class=\"dropdown-item\"\n                href=\"/user/templates\"\n                on:click={(e) => handleNavigation(e, \"/user/templates\")}\n                >Templates</a\n              >\n            </li>\n            {#if isLead === true}\n            <li>\n              <a\n                class=\"dropdown-item\"\n                href=\"/tle/teammembers\"\n                on:click={(e) => handleNavigation(e, \"/tle/teammembers\")}\n                >Team Members</a\n              >\n            </li>       \n            {/if}\n          </ul>\n        </li>\n        <li class=\"nav-item\">\n          <a\n            class=\"nav-link\"\n            href=\"/user/timeentries\"\n            on:click={(e) => handleNavigation(e, \"/user/timeentries\")}\n          >\n            Time Entries\n          </a>\n        </li>\n        <li class=\"nav-item\">\n          <a\n            class=\"nav-link\"\n            href=\"/user/report\"\n            on:click={(e) => handleNavigation(e, \"/user/report\")}\n          >\n            Report\n          </a>\n        </li>\n        <li class=\"nav-item\">\n          <a\n            class=\"nav-link\"\n            href=\"/tle/report\"\n            on:click={(e) => handleNavigation(e, \"/tle/report\")}\n          >\n            TLE Report\n          </a>\n        </li>\n      {/if}\n    </ul>\n  </div>\n</nav>\n","<script lang=\"ts\">\n  import { user } from \"../stores/userstore\";\n</script>\n\n<div class=\"jumbotron\">\n  <h1 class=\"display-3\">🐊 MiniRedmine, Svelte! 🦄<small>Now running on .NET 6</small></h1>\n  {#if $user.unauthorized === true}\n    <p class=\"lead\">\n      Welcome you need to register your user info to use the app.\n    </p>\n  {:else}\n    <p class=\"lead\">Welcome {$user.firstname}.</p>\n  {/if}\n</div>\n","<script lang=\"ts\">\n  import { user } from \"../stores/userstore\";\n\n  export let handleNavigation:Function;\n\n  async function handleSubmit(event:Event):Promise<void> {\n    event.preventDefault();\n    const res = await fetch('/api/redmine/userinfo',{\n      headers:{\n        'Redmine-Key':`${userApiKey}`\n      }\n    });\n    user.register(await res.json());\n    handleNavigation(null, \"/\");\n  }\n  let userApiKey: string;\n</script>\n\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col\">\n      <form on:submit={handleSubmit}>\n        <h1 class=\"h3 mb-3 font-weight-normal\">\n          Please input your Redmine Api Key\n        </h1>\n        <label for=\"inputApiKey\" class=\"sr-only\">Api Key</label>\n        <input\n          type=\"text\"\n          id=\"inputApiKey\"\n          class=\"form-control\"\n          placeholder=\"Redmine Api Key\"\n          required\n          bind:value={userApiKey} />\n        <button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\">\n          Login\n        </button>\n      </form>\n    </div>\n  </div>\n</div>\n","<script lang=\"ts\">\n  import {format,parseISO} from \"date-fns\";\n  import {user} from '../stores/userstore';\n  const lastLogin = format(parseISO($user.last_login_on), \"yyyy-MMM-dd HH:mm\");\n</script>\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <div\n        class=\"card card-inverse\">\n        <div class=\"card-block\">\n          <div class=\"row\">\n            <div class=\"col-md-8 col-sm-8\">\n              <h2 class=\"card-title\">\n                Name: {$user.firstname} {$user.lastname}\n              </h2>\n              <p class=\"card-text\">\n                <strong>Login:</strong>\n                {$user.login}\n              </p>\n              <p class=\"card-text\">\n                <strong>Last login:</strong>\n                {lastLogin}\n              </p>\n              <p class=\"card-text\">\n                <strong>Id:</strong>\n                {$user.id}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { writable } from 'svelte/store';\r\nconst _REDMINE_USER_ISSUES = \"REDMINE_USER_ISSUES\";\r\nfunction createIssuesStore() {\r\n    var _a;\r\n    const issues = (_a = localStorage.getItem(_REDMINE_USER_ISSUES)) !== null && _a !== void 0 ? _a : '[]';\r\n    const jsonIssues = JSON.parse(issues);\r\n    const { subscribe, set, update } = writable(jsonIssues);\r\n    return {\r\n        subscribe,\r\n        updateIssues: (issues) => update(() => {\r\n            localStorage.setItem(_REDMINE_USER_ISSUES, JSON.stringify(issues));\r\n            return issues;\r\n        })\r\n    };\r\n}\r\nexport const issues = createIssuesStore();\r\n","<script lang=\"ts\">\n  import { issues } from \"../stores/issuestore\";\n  import { user } from \"../stores/userstore\";\n  import type IIssue from \"../interfaces/IIssue\";\n  async function handleSubmit(event: Event) {\n    event.preventDefault();\n    let issueExists = false;\n    let tempIssues = Array.from($issues);\n    for (let index = 0; index < tempIssues.length; index++) {\n      const element = tempIssues[index];\n      if (element.id === newIssue) {\n        issueExists = true;\n      }\n    }\n    if (issueExists === false) {\n      const res = await fetch(`/api/redmine/issue/${newIssue}`, {\n        headers: {\n          \"Redmine-Key\": `${$user.api_key}`,\n        }\n      });\n      if (res.ok === true) {\n        tempIssues.push(await res.json());\n        issues.updateIssues(tempIssues);\n      }\n    }\n  }\n\n  function handleRemove(event: Event, id: number) {\n    event.preventDefault();\n    let deleteIndex: number = -1;\n    let tempIssues: IIssue[] = Array.from($issues);\n    for (let index = 0; index < tempIssues.length; index++) {\n      const element = tempIssues[index];\n      if (element.id === id) {\n        deleteIndex = index;\n      }\n    }\n    if (deleteIndex >= 0) {\n      tempIssues.splice(deleteIndex, 1);\n      issues.updateIssues(tempIssues);\n    }\n  }\n\n  let newIssue: number = 0;\n</script>\n\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-2\">\n      <form on:submit={handleSubmit}>\n        <input\n          type=\"number\"\n          min=\"1\"\n          max=\"9999999\"\n          class=\"form-control\"\n          bind:value={newIssue}\n        />\n        <button type=\"submit\" class=\"btn btn-sm btn-success\">\n          <i class=\"fas fa-plus-circle\" />\n        </button>\n      </form>\n    </div>\n    <div class=\"col-8\">\n      <table class=\"table table-striped\">\n        <thead>\n          <tr>\n            <th>Issue</th>\n            <th>Project</th>\n            <th>Subject</th>\n            <th />\n          </tr>\n        </thead>\n        <tbody>\n          {#each $issues as issue (issue.id)}\n            <tr>\n              <td>{issue.id}</td>\n              <td>{issue.project.name}</td>\n              <td>{issue.subject}</td>\n              <td>\n                <button\n                  type=\"button\"\n                  class=\"btn btn-sm btn-danger\"\n                  on:click={(e) => handleRemove(e, issue.id)}\n                >\n                  <i class=\"fas fa-trash\" />\n                </button>\n              </td>\n            </tr>\n          {/each}\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n","import { writable } from 'svelte/store';\r\nconst _REDMINE_USER_TEMPLATES = \"REDMINE_USER_TEMPLATES\";\r\nfunction createTemplatesStore() {\r\n    var _a;\r\n    const templates = (_a = localStorage.getItem(_REDMINE_USER_TEMPLATES)) !== null && _a !== void 0 ? _a : '[]';\r\n    const jsonTemplates = JSON.parse(templates);\r\n    const { subscribe, set, update } = writable(jsonTemplates);\r\n    return {\r\n        subscribe,\r\n        updateTemplates: (templates) => update(() => {\r\n            localStorage.setItem(_REDMINE_USER_TEMPLATES, JSON.stringify(templates));\r\n            return templates;\r\n        })\r\n    };\r\n}\r\nexport const templates = createTemplatesStore();\r\n","import { writable } from 'svelte/store';\r\nconst _REDMINE_ACTIVITIES = \"REDMINE_ACTIVITIES\";\r\nfunction createActivtiesStore() {\r\n    var _a;\r\n    const activities = (_a = sessionStorage.getItem(_REDMINE_ACTIVITIES)) !== null && _a !== void 0 ? _a : '[]';\r\n    const jsonActivities = JSON.parse(activities);\r\n    const { subscribe, set, update } = writable(jsonActivities);\r\n    return {\r\n        subscribe,\r\n        updateActivities: (activities) => update(() => {\r\n            sessionStorage.setItem(_REDMINE_ACTIVITIES, JSON.stringify(activities));\r\n            return activities;\r\n        })\r\n    };\r\n}\r\nexport const activities = createActivtiesStore();\r\n","<script lang=\"ts\">\n  import { onMount } from \"svelte\";\n  import { user } from \"../stores/userstore\";\n  import { issues } from \"../stores/issuestore\";\n  import { templates } from \"../stores/templatestore\";\n  import { activities } from \"../stores/activitystore\";\n\n  import type ITemplate from \"../interfaces/ITemplate\";\n\n  function handleSubmit(event: Event) {\n    event.preventDefault();\n    let tempTemplates = Array.from($templates);\n    tempTemplates.push(newtemplate);\n    templates.updateTemplates(tempTemplates);\n    newtemplate = initTemplate();\n  }\n\n  function handleRemove(event: Event, id: string) {\n    event.preventDefault();\n    let deleteIndex = -1;\n    let tempTemplates = Array.from($templates);\n    for (let index = 0; index < tempTemplates.length; index++) {\n      const element = tempTemplates[index];\n      if (element.id === id) {\n        deleteIndex = index;\n      }\n    }\n    if (deleteIndex >= 0) {\n      tempTemplates.splice(deleteIndex, 1);\n      templates.updateTemplates(tempTemplates);\n    }\n  }\n\n  function initTemplate(): ITemplate {\n    const now = new Date();\n    return {\n      id: `${now.getFullYear()}${now.getMonth()}${now.getDay()}${now.getHours()}${now.getMinutes()}${now.getSeconds()}${now.getMilliseconds()}`,\n      issue: 0,\n      activity: 0,\n      comments: \"\",\n      hours: 0,\n    };\n  }\n\n  function translateActivity(activity: number) {\n    let result = \"\";\n    for (let index = 0; index < $activities.length; index++) {\n      const element = $activities[index];\n      if (element.id === activity) {\n        result = element.name;\n        break;\n      }\n    }\n    return result;\n  }\n\n  function translateIssue(issue: number) {\n    let result = \"\";\n    for (let index = 0; index < $issues.length; index++) {\n      const element = $issues[index];\n      if (element.id === issue) {\n        result = element.subject;\n        break;\n      }\n    }\n    return result;\n  }\n\n  let newtemplate = initTemplate();\n\n  onMount(async () => {\n    if ($user.unauthorized === undefined && $activities.length === 0) {\n      const res = await fetch(`/api/redmine/timeentryactivities`, {\n        headers: {\n          \"Redmine-Key\": `${$user.api_key}`,\n        },\n      });\n      const tempActivities = await res.json();\n      activities.updateActivities(tempActivities);\n    }\n  });\n</script>\n\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col\">\n      <form on:submit={handleSubmit}>\n        <div class=\"form-group\">\n          <label for=\"Issue\">Issue</label>\n          <select\n            bind:value={newtemplate.issue}\n            class=\"form-control\"\n            name=\"Issue\"\n          >\n            <option value=\"\" selected>--Select an issue--</option>\n            {#each $issues as issue (issue.id)}\n              <option value={issue.id}\n                >{issue.id} - {issue.project.name} - {issue.subject}</option\n              >\n            {/each}\n          </select>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"Issue\">Activity</label>\n          <select\n            bind:value={newtemplate.activity}\n            class=\"form-control\"\n            name=\"Activity\"\n          >\n            <option value=\"\" selected>--Select an activity--</option>\n            {#each $activities as activity (activity.id)}\n              <option value={activity.id}>{activity.name}</option>\n            {/each}\n          </select>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"Comments\">Comments</label>\n          <input\n            type=\"text\"\n            bind:value={newtemplate.comments}\n            class=\"form-control\"\n            placeholder=\"Comments\"\n          />\n        </div>\n        <div class=\"form-group\">\n          <label for=\"Hours\">Hours</label>\n          <input\n            type=\"number\"\n            min=\"0.0\"\n            max=\"24.0\"\n            step=\"0.5\"\n            bind:value={newtemplate.hours}\n            class=\"form-control\"\n            placeholder=\"Hours\"\n          />\n        </div>\n        <button type=\"submit\" class=\"btn btn-sm btn-success\">\n          <i class=\"fas fa-plus-circle\" />\n        </button>\n      </form>\n    </div>\n    <div class=\"col\">\n      <table class=\"table table-striped\">\n        <caption>\n          <p class=\"text-info\">\n            Total Hours: {$templates.reduce((a, b) => a + b.hours, 0)}\n          </p>\n        </caption>\n        <thead>\n          <tr>\n            <th>Issue</th>\n            <th>Activty</th>\n            <th>Comments</th>\n            <th>Hours</th>\n            <th />\n          </tr>\n        </thead>\n        <tbody>\n          {#each $templates as template (template.id)}\n            <tr>\n              <td>{translateIssue(template.issue)}</td>\n              <td>{translateActivity(template.activity)}</td>\n              <td>{template.comments}</td>\n              <td>{template.hours}</td>\n              <td>\n                <button\n                  type=\"button\"\n                  class=\"btn btn-sm btn-danger\"\n                  on:click={(e) => handleRemove(e, template.id)}\n                >\n                  <i class=\"fas fa-trash\" />\n                </button>\n              </td>\n            </tr>\n          {/each}\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n","import { writable } from 'svelte/store';\r\nconst _REDMINE_TEAM_MEMBERS = \"REDMINE_TEAM_MEMBERS\";\r\nfunction createTeamMemberStore() {\r\n    var _a;\r\n    const teamMembers = (_a = localStorage.getItem(_REDMINE_TEAM_MEMBERS)) !== null && _a !== void 0 ? _a : '[]';\r\n    const jsonMembers = JSON.parse(teamMembers);\r\n    const { subscribe, set, update } = writable(jsonMembers);\r\n    return {\r\n        subscribe,\r\n        updateMembers: (teamMembers) => update(() => {\r\n            localStorage.setItem(_REDMINE_TEAM_MEMBERS, JSON.stringify(teamMembers));\r\n            return teamMembers;\r\n        })\r\n    };\r\n}\r\nexport const teamMembers = createTeamMemberStore();\r\n","<script lang=\"ts\">\n  import { teamMembers } from \"../stores/teammemberstore\";\n  let newTeamMember: number = 0;\n\n  async function handleSubmit(event: Event) {\n    event.preventDefault();\n    let memberExists = false;\n    let tempMembers = Array.from($teamMembers);\n    let index =tempMembers.indexOf(newTeamMember);\n    if(index >=0)\n    {\n      newTeamMember = 0;\n    }\n    else\n    {\n      tempMembers.push(newTeamMember);\n      newTeamMember = 0;\n      teamMembers.updateMembers(tempMembers);\n    }\n  }\n\n  function handleRemove(event: Event, index: number) {\n    event.preventDefault();\n    let tempMembers = Array.from($teamMembers);\n    tempMembers.splice(index,1);\n    teamMembers.updateMembers(tempMembers);\n  }\n</script>\n\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-4\">\n      <form on:submit={handleSubmit}>\n        <input\n          type=\"number\"\n          min=\"1\"\n          max=\"9999999\"\n          step=\"1\"\n          class=\"form-control\"\n          bind:value={newTeamMember} />\n        <button type=\"submit\" class=\"btn btn-sm btn-success\">\n          <i class=\"fas fa-plus-circle\" />\n        </button>\n      </form>\n    </div>\n    <div class=\"col\">\n      <table class=\"table table-striped\">\n        <thead>\n          <tr>\n            <th>Member Id</th>\n            <th />\n          </tr>\n        </thead>\n        <tbody>\n          {#each $teamMembers as member,i }\n            <tr>\n              <td>{member}</td>\n              <td>\n                <button\n                  type=\"button\"\n                  class=\"btn btn-sm btn-danger\"\n                  on:click={(e) => handleRemove(e, i)}>\n                  <i class=\"fas fa-trash\" />\n                </button>\n              </td>\n            </tr>\n          {/each}\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n\n","<script lang=\"ts\">\n\timport { onMount } from \"svelte\";\n\timport indexOf from \"lodash/indexOf\";\n\timport filter from \"lodash/filter\";\n\timport sortBy from \"lodash/sortBy\";\n\timport addDays from \"date-fns/addDays\";\n\timport format from \"date-fns/format\";\n\timport startOfMonth from \"date-fns/startOfMonth\";\n\timport endOfMonth from \"date-fns/endOfMonth\";\n\timport { user } from \"../stores/userstore\";\n\timport { issues } from \"../stores/issuestore\";\n\timport { templates } from \"../stores/templatestore\";\n\timport { activities } from \"../stores/activitystore\";\n\timport type INewTimeEntry from \"../interfaces/INewTimeEntry\";\n\timport type ITimeEntry from \"../interfaces/ITimeEntry\";\n\timport type ITurno from \"../interfaces/ITurno\";\n\timport type IModalData from \"../interfaces/IModalData\";\n\timport type ITemplate from \"../interfaces/ITemplate\";\n\timport type IServerTimeEntry from \"../interfaces/IServerTimeEntry\";\n\n\tconst holidays = [\n\t\"2022-01-01\",\n\t\"2022-01-17\",\n\t\"2022-02-21\",\n\t\"2022-05-30\",\n\t\"2022-07-04\",\n\t\"2022-09-05\",\n\t\"2022-10-10\",\n\t\"2022-11-11\",\n\t\"2022-11-24\"\n\t];\n\tlet quincena: ITurno[] = [];\n\tlet serverEntries: IServerTimeEntry[];\n\tlet displayEntries: ITimeEntry[];\n\tlet displayWeekends = false;\n\tlet modalWarning: boolean;\n\t$: modalWarning = false;\n\t$: displayEntries = [];\n\tlet modalData: IModalData;\n\t$: modalData = { turno: {} as ITurno, entries: [] };\n\n\tonMount(async () => {\n\tconst now = new Date();\n\n\tlet from: Date;\n\tlet to: Date;\n\n\tif (now.getDate() > 15) {\n\tfrom = new Date(now.getFullYear(), now.getMonth(), 16);\n\tto = endOfMonth(now);\n\t} else {\n\tfrom = startOfMonth(now);\n\tto = new Date(now.getFullYear(), now.getMonth(), 15);\n\t}\n\n\twhile (from <= to) {\n      const turno: ITurno = {\n        fecha: format(from, \"yyyy-MM-dd\"),\n        dia: from.getDay(),\n        diaSemana: format(from, \"EEE\"),\n      };\n      from = addDays(from, 1);\n      quincena.push(turno);\n    }\n    if ($user.unauthorized === undefined && $activities.length === 0) {\n      const res = await fetch(`/api/redmine/timeentryactivities`, {\n        headers: {\n          \"Redmine-Key\": `${$user.api_key}`,\n        },\n      });\n      const tempActivities = await res.json();\n      activities.updateActivities(tempActivities);\n    }\n    await refreshTimeEntries();\n  });\n\n  async function refreshTimeEntries(event?: Event) {\n    if (event) {\n      event.preventDefault();\n    }\n    if ($user.unauthorized === undefined && quincena.length) {\n      const from = quincena[0].fecha;\n      const to = quincena[quincena.length - 1].fecha;\n      const res = await fetch(\n        `/api/redmine/timeentries?userId=${$user.id}&from=${from}&to=${to}`,\n        {\n          headers: {\n            \"Redmine-Key\": `${$user.api_key}`,\n          },\n        }\n      );\n      serverEntries = sortBy(await res.json(), [\"spent_on\", \"id\"]);\n      refreshTable();\n    }\n  }\n\n  function refreshTable() {\n    let tempEntries: ITimeEntry[] = [];\n    quincena.forEach((diaQuincena) => {\n      const entries: IServerTimeEntry[] = filter(serverEntries, {\n        spent_on: diaQuincena.fecha,\n      });\n      if (displayWeekends === true && entries.length === 0) {\n        tempEntries.push(addEmptyDay(diaQuincena));\n      } else if (\n        entries.length === 0 &&\n        displayWeekends === false &&\n        diaQuincena.dia !== 0 &&\n        diaQuincena.dia !== 6\n      ) {\n        tempEntries.push(addEmptyDay(diaQuincena));\n      } else if (entries.length) {\n        entries.forEach((entry) => {\n          let newentry: ITimeEntry = {\n            id: entry.id,\n            project: entry.project.name,\n            spent_on: entry.spent_on,\n            issueId: entry.issue.id,\n            issue: entry.issue.name,\n            activity: entry.activity.name,\n            comments: entry.comments,\n            hours: entry.hours,\n            jornada: diaQuincena,\n          };\n          tempEntries.push(newentry);\n        });\n      }\n    });\n\n    displayEntries = tempEntries;\n  }\n\n  function handleModalOpen(timeEntry: ITimeEntry) {\n    modalData.turno = timeEntry.jornada;\n    const index: number = indexOf(holidays, modalData.turno.fecha);\n    modalWarning =\n      modalData.turno.dia === 0 || modalData.turno.dia === 6 || index >= 0;\n    if (timeEntry.id > 0 && $templates.length === 0) {\n      modalData.entries.push(addEmptyNewEntry(timeEntry.jornada));\n    } else if ($templates.length > 0 && timeEntry.id < 0) {\n      modalData.entries = [];\n      $templates.forEach((template: ITemplate) => {\n        modalData.entries.push({\n          spent_on: timeEntry.jornada.fecha,\n          issue: template.issue,\n          activity: template.activity,\n          comments: template.comments,\n          hours: template.hours,\n        });\n      });\n    } else {\n      modalData.entries.push(addEmptyNewEntry(timeEntry.jornada));\n    }\n  }\n\n  function handleAddEmptyEntryInModal(event: Event) {\n    event.preventDefault();\n    let tempEntries = Array.from(modalData.entries);\n    tempEntries.push(addEmptyNewEntry(modalData.turno));\n    modalData.entries = tempEntries;\n  }\n\n  function addEmptyNewEntry(turno: ITurno): INewTimeEntry {\n    return {\n      spent_on: turno.fecha,\n      issue: 0,\n      activity: 0,\n      comments: \"\",\n      hours: 0,\n    };\n  }\n\n  function addEmptyDay(turno: ITurno): ITimeEntry {\n    return {\n      id: -1,\n      spent_on: turno.fecha,\n      issueId: 0,\n      project: \"\",\n      issue: \"No Hours registered\",\n      activity: \"No Hours registered\",\n      comments: \"No Hours registered\",\n      hours: 0,\n      jornada: turno,\n    };\n  }\n\n  async function handleModalSave() {\n    let tempServerEntries = Array.from(serverEntries);\n    await asyncForEach(modalData.entries, async (element: INewTimeEntry) => {\n      const res = await fetch(\"/api/redmine/timeentries\", {\n        method: \"POST\",\n        body: JSON.stringify(element),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Redmine-Key\": `${$user.api_key}`,\n        },\n      });\n      if (res.ok === true) {\n        tempServerEntries.push(await res.json());\n      }\n    });\n    serverEntries = sortBy(tempServerEntries, [\"spent_on\", \"id\"]);\n    let element = document.getElementById(\"timeEntriesForm\");\n    element.setAttribute(\"class\", \"modal\");\n    modalData = { turno: {} as ITurno, entries: [] };\n    refreshTable();\n  }\n\n  function handleModalClose() {\n    modalData = { turno: {} as ITurno, entries: new Array<INewTimeEntry>() };\n  }\n\n  async function asyncForEach(array: Array<any>, callback: Function) {\n    for (let index = 0; index < array.length; index++) {\n      await callback(array[index], index, array);\n    }\n  }\n\n  function removeModalEntry(event: Event, index: number) {\n    event.preventDefault();\n    let tempEntries = Array.from(modalData.entries);\n    if (tempEntries.length > 1) {\n      tempEntries.splice(index, 1);\n      modalData.entries = tempEntries;\n    }\n  }\n</script>\n\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col\">\n      <table class=\"table table-sm table-hover\">\n        <thead class=\"thead-dark\">\n          <tr>\n            <th>Date</th>\n            <th>Project</th>\n            <th>Activity</th>\n            <th>Comments</th>\n            <th>Hours</th>\n            <th>\n              <div class=\"form-group form-check\">\n                <input\n                  type=\"checkbox\"\n                  class=\"form-check-input\"\n                  id=\"displayWeekends\"\n                  bind:checked={displayWeekends}\n                  on:change={refreshTable}\n                />\n                <label class=\"form-check-label\" for=\"displayWeekends\">\n                  Display Weekends\n                </label>\n              </div>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {#each displayEntries as timeEntry}\n            <tr class={timeEntry.jornada.diaSemana.toLowerCase()}>\n              <td>{timeEntry.spent_on} {timeEntry.jornada.diaSemana}</td>\n              <td>{timeEntry.project}</td>\n              <td>{timeEntry.activity}</td>\n              <td>{timeEntry.comments}</td>\n              <td>{timeEntry.hours}</td>\n              <td>\n                <button\n                  type=\"button\"\n                  class=\"btn btn-sm {timeEntry.id < 0\n                    ? 'btn-success'\n                    : 'btn-primary'}\"\n                  data-bs-toggle=\"modal\"\n                  data-bs-target=\"#timeEntriesForm\"\n                  on:click={() => handleModalOpen(timeEntry)}\n                >\n                  <i class=\"fas fa-calendar-plus\" />\n                </button>\n              </td>\n            </tr>\n          {/each}\n        </tbody>\n      </table>\n    </div>\n  </div>\n  <!-- Modal -->\n  <div\n    class=\"modal fade\"\n    data-bs-backdrop=\"static\"\n    data-bs-keyboard=\"false\"\n    tabindex=\"-1\"\n    aria-labelledby=\"staticBackdropLabel\"\n    aria-hidden=\"true\"\n    id=\"timeEntriesForm\"\n  >\n    <div class=\"modal-dialog modal-lg\" role=\"document\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header {modalWarning ? 'bg-warning' : ''}\">\n          <h5 class=\"modal-title\" id=\"timeEntriesFormTitle\">\n            Register Time Entries for {modalData.turno.diaSemana}\n            {modalData.turno.fecha}\n          </h5>\n          <button\n            type=\"button\"\n            class=\"btn btn-sm close\"\n            data-bs-dismiss=\"modal\"\n            aria-label=\"Close\"\n            on:click={handleModalClose}\n          >\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </div>\n        <div class=\"modal-body\">\n          <table>\n            <caption>\n              <button\n                type=\"button\"\n                class=\"btn btn-sm btn-info\"\n                on:click={(e) => handleAddEmptyEntryInModal(e)}\n              >\n                <i class=\"fas fa-calendar-plus\" /> Add empty entry\n              </button>\n            </caption>\n            <thead>\n              <tr>\n                <th>Issue</th>\n                <th>Activity</th>\n                <th>Comments</th>\n                <th>Hours</th>\n                <th />\n              </tr>\n            </thead>\n            <tbody>\n              {#each modalData.entries as entry, index}\n                <tr>\n                  <td>\n                    <select\n                      bind:value={entry.issue}\n                      class=\"form-control\"\n                      name=\"Issue\"\n                    >\n                      <option value=\"\" selected>--Select an issue--</option>\n                      {#each $issues as issue (issue.id)}\n                        <option value={issue.id}>\n                          {issue.id}\n                          {issue.project.name}\n                        </option>\n                      {/each}\n                    </select>\n                  </td>\n                  <td>\n                    <select\n                      bind:value={entry.activity}\n                      class=\"form-control\"\n                      name=\"Activity\"\n                    >\n                      <option value=\"\" selected>--Select an activity--</option>\n                      {#each $activities as activity (activity.id)}\n                        <option value={activity.id}>{activity.name}</option>\n                      {/each}\n                    </select>\n                  </td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      bind:value={entry.comments}\n                      class=\"form-control\"\n                      placeholder=\"Comments\"\n                    />\n                  </td>\n                  <td>\n                    <input\n                      type=\"number\"\n                      min=\"0.0\"\n                      max=\"24.0\"\n                      step=\"0.5\"\n                      bind:value={entry.hours}\n                      class=\"form-control\"\n                      placeholder=\"Hours\"\n                    />\n                  </td>\n                  <td>\n                    <button\n                      type=\"button\"\n                      class=\"btn btn-sm btn-danger\"\n                      on:click={(e) => removeModalEntry(e, index)}\n                    >\n                      <i class=\"fas fa-trash\" />\n                    </button>\n                  </td>\n                </tr>\n              {/each}\n            </tbody>\n          </table>\n        </div>\n        <div class=\"modal-footer\">\n          <button\n            type=\"button\"\n            class=\"btn btn-secondary\"\n            data-bs-dismiss=\"modal\"\n            on:click={handleModalClose}\n          >\n            Close\n          </button>\n          <button\n            type=\"button\"\n            class=\"btn btn-danger\"\n            data-bs-dismiss=\"modal\"\n            on:click={async () => await handleModalSave()}\n          >\n            Submit Time Entries\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<style>\n  td {\n    color: black;\n    text-shadow: 1px 1px lightgrey;\n  }\n  tr.monday {\n    background-color: lightgoldenrodyellow;\n  }\n  tr.tuesday {\n    background-color: lightpink;\n  }\n  tr.wednesday {\n    background-color: lightseagreen;\n  }\n  tr.thursday {\n    background-color: lightsalmon;\n  }\n  tr.friday {\n    background-color: lightsteelblue;\n  }\n  tr.saturday {\n    background-color: wheat;\n  }\n  tr.sunday {\n    background-color: coral;\n  }\n</style>\n","<script lang=\"ts\">\n  import { onMount } from \"svelte\";\n  import filter from \"lodash/filter\";\n  import sumBy from \"lodash/sumBy\";\n  import sortBy from \"lodash/sortBy\";\n  import addDays from 'date-fns/addDays';\n  import format from 'date-fns/format';\n  import startOfMonth from 'date-fns/startOfMonth';\n  import endOfMonth from 'date-fns/endOfMonth';\n  import { user } from \"../stores/userstore\";\n  import { issues } from \"../stores/issuestore\";\n  import type IServerTimeEntry from \"../interfaces/IServerTimeEntry\";\n  import type ITurno from \"../interfaces/ITurno\";\n  import type IIssue from \"../interfaces/IIssue\";\n\n  let quincena: ITurno[] = [];\n  let serverEntries: IServerTimeEntry[];\n  let totalHours: IIssue[] = $issues;\n  $: serverEntries = [];\n\n  onMount(async () => {\n    const now = new Date();\n\n    let from: Date;\n    let to: Date;\n\n    if (now.getDate() > 15) {\n      from = new Date(now.getFullYear(), now.getMonth(), 16);\n      to = endOfMonth(now);\n    } else {\n      from = startOfMonth(now);\n      to = new Date(now.getFullYear(), now.getMonth(), 15);\n    }\n\n    while (from <= to) {\n      const turno: ITurno = {\n        fecha: format(from, \"yyyy-MM-dd\"),\n        dia: from.getDay(),\n        diaSemana: format(from, \"dddd\"),\n      };\n      from = addDays(from, 1);\n      quincena.push(turno);\n    }\n\n    let tempServerEntries = await refreshTimeEntries();\n    calculateTotalHoursPerIssue(tempServerEntries);\n    serverEntries = tempServerEntries;\n  });\n\n  async function refreshTimeEntries(\n    event?: Event\n  ): Promise<IServerTimeEntry[]> {\n    let result: IServerTimeEntry[] = [];\n    if (event) {\n      event.preventDefault();\n    }\n    if ($user.unauthorized === undefined && quincena.length) {\n      const from = quincena[0].fecha;\n      const to = quincena[quincena.length - 1].fecha;\n      const res = await fetch(\n        `/api/redmine/timeentries?userId=${$user.id}&from=${from}&to=${to}`, {\n        headers: {\n          \"Redmine-Key\": `${$user.api_key}`,\n        }\n      }\n      );\n      result = sortBy(await res.json(), [\"spent_on\", \"id\"]);\n    }\n    return result;\n  }\n\n  function calculateTotalHoursPerIssue(tempServerEntries:IServerTimeEntry[]) {\n    let tempIssues = totalHours;\n    for (let index = 0; index < tempIssues.length; index++) {\n      const issueEntries = filter(\n        tempServerEntries,\n        (o: IServerTimeEntry) => o.issue.id === tempIssues[index].id\n      );\n      tempIssues[index].spent_hours = sumBy(issueEntries, \"hours\");\n    }\n    totalHours = tempIssues;\n  }\n</script>\n\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col\">\n      {#each totalHours as issue (issue.id)}\n        <h5>Total de horas para {issue.project.name} : {issue.spent_hours}</h5>\n      {/each}\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col\">\n      <table class=\"table table-sm table-hover\">\n        <thead class=\"thead-dark\">\n          <tr>\n            <th>Date</th>\n            <th>Activity</th>\n            <th>Comments</th>\n            <th>Hours</th>\n          </tr>\n        </thead>\n        <tbody>\n          {#each serverEntries as timeEntry}\n            <tr>\n              <td>{timeEntry.spent_on}</td>\n              <td>{timeEntry.activity.name}</td>\n              <td>{timeEntry.comments}</td>\n              <td>{timeEntry.hours}</td>\n            </tr>\n          {/each}\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n","<script lang=\"ts\">\n  import { onMount } from \"svelte\";\n  import format from \"date-fns/format\";\n  import startOfMonth from \"date-fns/startOfMonth\";\n  import endOfMonth from \"date-fns/endOfMonth\";\n  import { user } from \"../stores/userstore\";\n  import { teamMembers } from \"../stores/teammemberstore\";\n  import type ITeamEntriesReport from \"../interfaces/ITeamEntriesReport\";\n  import { each } from \"svelte/internal\";\n  import { memoize } from \"lodash\";\n  import TeamMembers from \"./TeamMembers.svelte\";\n  let from: Date;\n  let to: Date;\n  let teamEntriesReport: Array<ITeamEntriesReport>;\n  $: from = new Date();\n  $: to = new Date();\n  $: teamEntriesReport = [];\n  onMount(async () => {\n    const now = new Date();\n    if (now.getDate() > 15) {\n      from = new Date(now.getFullYear(), now.getMonth(), 16);\n      to = endOfMonth(now);\n    } else {\n      from = startOfMonth(now);\n      to = new Date(now.getFullYear(), now.getMonth(), 15);\n    }\n    await refreshTimeEntries();\n  });\n\n  async function refreshTimeEntries(): Promise<void> {\n    const payload = new FormData();\n    payload.append(\"From\", format(from, \"yyyy-MM-dd\"));\n    payload.append(\"To\", format(to, \"yyyy-MM-dd\"));\n    $teamMembers.forEach((m) => payload.append(\"TeamMembers\", m.toString()));\n    const res = await fetch(\"/api/redmine/teamtimeentries\", {\n      method: \"POST\",\n      headers: {\n        \"Redmine-Key\": `${$user.api_key}`,\n      },\n      body: payload,\n    });\n    if (res.ok === true) {\n      teamEntriesReport = await res.json();\n    }\n  }\n</script>\n\n<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col\">\n      <h2>\n        Time entries report for period\n        <small class=\"text-dark bg-info\"\n          >{format(from, \"EEEE, yyyy-MM-dd\")}</small\n        >\n        to\n        <small class=\"text-dark bg-info\">{format(to, \"EEEE, yyyy-MM-dd\")}</small\n        >\n      </h2>\n      <ul>\n        {#each teamEntriesReport as project}\n          <li>\n            {project.project}\n            <ul>\n              {#each project.memberHours as member}\n                <li>{member.name} Hours:{member.hours}</li>\n              {/each}\n            </ul>\n          </li>\n        {/each}\n      </ul>\n    </div>\n  </div>\n</div>\n","<script lang=\"typescript\">\n  import { onMount } from \"svelte\";\n  import Header from \"./components/Header.svelte\";\n  import Index from \"./pages/Index.svelte\";\n  import Login from \"./pages/Login.svelte\";\n  import Profile from \"./pages/Profile.svelte\";\n  import Issues from \"./pages/Issues.svelte\";\n  import Templates from \"./pages/Templates.svelte\";\n  import TeamMembers from \"./pages/TeamMembers.svelte\";\n  import TimeEntries from \"./pages/TimeEntries.svelte\";\n  import Report from \"./pages/Report.svelte\";\n  import TLEReport from \"./pages/TLEReport.svelte\";\n  import { user } from \"./stores/userstore\";\n\n  function routeHandler(event: Event, route: string) {\n    event ? event.preventDefault() : () => {};\n    window.history.replaceState(null, routeTranslator(route), route);\n    currentRoute = route;\n  }\n\n  function routeTranslator(route: string): string {\n    let result: string;\n\n    switch (route) {\n      case \"/login\":\n        result = \"Login\";\n        break;\n      case \"/user/profile\":\n        result = \"Profile\";\n        break;\n      case \"/user/issues\":\n        result = \"Issues\";\n        break;\n      case \"/user/templates\":\n        result = \"Templates\";\n        break;\n      case \"/tle/teammembers\":\n        result = \"Team Members\";\n        break;\n      case \"/user/timeentries\":\n        result = \"Time Entries\";\n        break;\n      case \"/user/report\":\n        result = \"Time Card\";\n        break;\n      case \"/tle/report\":\n        result = \"Team Lead Report\";\n        break;\n      default:\n        result = \"Index\";\n        break;\n    }\n    return result;\n  }\n  let leadIds: Array<Number>;\n  let currentRoute: string;\n  let isLead: boolean;\n  $: currentRoute = \"/\";\n  $: leadIds = [];\n  $: isLead = false;\n\n  onMount(async () => {\n    routeHandler(null, window.location.pathname);\n    const res = await fetch(\"/api/redmine/leads\");\n    if (res.ok === true) {\n      leadIds = JSON.parse(await res.text());\n    }\n    if (leadIds.find((i) => i === $user.id)) {\n      isLead = true;\n    }\n  });\n</script>\n\n<Header handleNavigation={routeHandler} {isLead} />\n{#if currentRoute === \"/\"}\n  <Index />\n{:else if currentRoute === \"/login\" && $user.unauthorized === true}\n  <Login handleNavigation={routeHandler} />\n{:else if currentRoute === \"/user/profile\" && $user.unauthorized === undefined}\n  <Profile />\n{:else if currentRoute === \"/user/issues\" && $user.unauthorized === undefined}\n  <Issues />\n{:else if currentRoute === \"/user/templates\" && $user.unauthorized === undefined}\n  <Templates />\n{:else if currentRoute === \"/tle/teammembers\" && isLead === true}\n  <TeamMembers />\n{:else if currentRoute === \"/user/timeentries\" && $user.unauthorized === undefined}\n  <TimeEntries />\n{:else if currentRoute === \"/user/report\" && $user.unauthorized === undefined}\n  <Report />\n{:else if currentRoute === \"/tle/report\" && $user.unauthorized === undefined}\n  <TLEReport />\n{:else}\n  <Index />\n{/if}\n<footer>\n  Copyright &copy; Jesus Acedo 2018 - 2022 version: 2.3.0\n</footer>","import App from './App.svelte';\r\nconst app = new App({\r\n    target: document.body\r\n});\r\nexport default app;\r\n"],"names":["_REDMINE_USER","user","_a","localStorage","getItem","JSON","stringify","unauthorized","jsonUser","parse","subscribe","set","update","register","currentUser","setItem","createUserStore","e","handleNavigation","firstname","userApiKey","lastname","login","id","_REDMINE_USER_ISSUES","issues","jsonIssues","updateIssues","createIssuesStore","project","name","subject","newIssue","handleRemove","issue","_REDMINE_USER_TEMPLATES","templates","jsonTemplates","updateTemplates","createTemplatesStore","_REDMINE_ACTIVITIES","activities","sessionStorage","jsonActivities","updateActivities","createActivtiesStore","activity","comments","hours","reduce","a","b","newtemplate","template","_REDMINE_TEAM_MEMBERS","teamMembers","jsonMembers","updateMembers","createTeamMemberStore","newTeamMember","i","spent_on","jornada","diaSemana","toLowerCase","turno","fecha","entries","displayWeekends","handleModalOpen","timeEntry","handleAddEmptyEntryInModal","removeModalEntry","index","handleModalSave","spent_hours","memberHours","format","undefined","target","document","body"],"sourceRoot":""}
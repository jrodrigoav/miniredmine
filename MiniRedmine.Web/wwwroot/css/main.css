td.svelte-1hus6gl{color:#000;text-shadow:1px 1px #d3d3d3}tr.monday.svelte-1hus6gl{background-color:#fafad2}tr.tuesday.svelte-1hus6gl{background-color:#ffb6c1}tr.wednesday.svelte-1hus6gl{background-color:#20b2aa}tr.thursday.svelte-1hus6gl{background-color:#ffa07a}tr.friday.svelte-1hus6gl{background-color:#b0c4de}tr.saturday.svelte-1hus6gl{background-color:wheat}tr.sunday.svelte-1hus6gl{background-color:coral}
/*# sourceMappingURL=data:application/json;base64, */